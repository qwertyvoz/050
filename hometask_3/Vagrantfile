# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
 

Vagrant.configure("2") do |config|
  
   # config.vm.define "ubu" do |ubu|
    #  ubu.vm.box = "ubuntu/bionic64"
     # ubu.vm.network "forwarded_port", host: 8080, guest: 8090
    
      #ubu.vm.provision "shell", inline: <<-SHELL

  #  end

  config.vm.define "cent" do |cent|
      cent.vm.box = "centos/7"
       cent.vm.network "forwarded_port", host: 8080, guest: 8090
       cent.vm.network "forwarded_port", host: 3306, guest: 3306
      cent.vm.provision "shell", inline: <<-SHELL
chmod +x /vagrant/atlassian-confluence-7.3.1-x64.bin
cd /vagrant
(echo "o" && echo "1" && echo "i" && echo "y") | ./atlassian-confluence-7.3.1-x64.bin
sudo yum -y install wget
wget http://repo.mysql.com/mysql57-community-release-el7.rpm
sudo rpm -ivh mysql57-community-release-el7.rpm
sudo yum update
sudo yum -y install mysql-server 
sudo systemctl start mysqld 
sudo sh -c "echo 'character-set-server=utf8
collation-server=utf8_bin
default-storage-engine=INNODB
max_allowed_packet=256M
innodb_log_file_size=2GB
transaction-isolation=READ-COMMITTED
binlog_format=row' >> /etc/my.cnf"
sudo service mysqld restart
pass=$(sudo cat /var/log/mysqld.log|grep "temporary password"|rev|cut -d":" -f1-1|rev|sed 's/ //'); sudo mysql -u root -p ${pass} 
uninstall plugin validate_password;
CREATE DATABASE CONFLUENCE CHARACTER SET utf8 COLLATE utf8_bin;
GRANT ALL PRIVILEGES ON CONFLUENCE.* TO 'root'@'localhost' IDENTIFIED BY '123456';
exit;
wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.zip
sudo yum -y install unzip.x86_64 .ssh/
sudo unzip mysql-connector-java-5.1.46.zip -d mysql-connector
sudo cp mysql-connector/mysql-connector-java-5.1.46/mysql-connector-java-5.1.46-bin.jar /opt/atlassian/confluence/confluence/WEB-INF/lib
sudo /etc/init.d/confluence restart

SHELL
    end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", host: 8080, guest: 80

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
   config.vm.synced_folder "~/050/hometask_3/", "/vagrant"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
 end
